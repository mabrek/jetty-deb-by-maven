# This file controls what file are to be put on classpath or command line.
#
# Format is as follows:
#
# Each line contains entry in the format:
#
#  SUBJECT [ [!] CONDITION [AND|OR] ]*
# 
# where SUBJECT: 
#   ends with ".class" is the Main class to run.
#   ends with ".xml" is a configuration file for the command line
#   ends with "/" is a directory from which to add all jar and zip files. 
#   ends with "/*" is a directory from which to add all unconsidered jar and zip files.
#   ends with "/**" is a directory from which to recursively add all unconsidered jar and zip files.
#   Containing = are used to assign system properties.
#   Containing ~= are used to assign start properties.
#   Containing /= are used to assign a canonical path.
#   all other subjects are treated as files to be added to the classpath.
#
# ${name} is expanded to a start property
# $(name) is expanded to either a start property or a system property. 
# The start property ${version} is defined as the version of the start.jar
#
# Files starting with "/" are considered absolute, all others are relative to
# the home directory.
#
# CONDITION is one of:
#   always
#   never
#   available classname        # true if class on classpath
#   property name              # true if set as start property
#   system   name              # true if set as system property
#   exists file                # true if file/dir exists
#   java OPERATOR version      # java version compared to literal
#   nargs OPERATOR number      # number of command line args compared to literal
#   OPERATOR := one of "<",">","<=",">=","==","!="
#
# CONDITIONS can be combined with AND OR or !, with AND being the assume
# operator for a list of CONDITIONS.
#
# Classpath operations are evaluated on the fly, so once a class or jar is
# added to the classpath, subsequent available conditions will see that class.
#
# The configuration file may be divided into sections with option names like:
# [ssl,default]
#
# Clauses after a section header will only be included if they match one of the tags in the 
# options property.  By default options are set to "default,*" or the OPTIONS property may
# be used to pass in a list of tags, eg. :
#
#    java -jar start.jar OPTIONS=jetty,jsp,ssl
#
# The tag '*' is always appended to the options, so any section with the * tag is always 
# applied.
#

# add a property defined classpath
${path}.path                                     property path

$(jetty.class.path)                              always
$(jetty.lib)/**                                  exists $(jetty.lib)

jetty.home=/usr/share/jetty                      always 

# The main class to run
org.eclipse.jetty.xml.XmlConfiguration.class
${start.class}.class                             property start.class

# The default configuration files
$(jetty.home)/etc/jetty.xml                      nargs == 0

# Default OPTIONS if not specified on the command line
OPTIONS~=default,*                               ! property OPTIONS

# Add a resources directory if it is there
[All,default]
$(jetty.home)/resources/

# Set the jetty classpath
/usr/share/jetty/lib/**

/usr/share/java/servlet-api-2.5.jar
/usr/share/java/slf4j-api.jar
/usr/share/java/gnumail.jar
/usr/share/java/activation.jar
